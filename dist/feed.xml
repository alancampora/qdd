<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Quilombo Driven Development</title>
    <description>Un poquito de Javascript sin romper nada</description>
    <link>https://quilombodd.herokuapp.com//</link>
    <atom:link href="https://quilombodd.herokuapp.com//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 25 Feb 2017 01:55:05 -0300</pubDate>
    <lastBuildDate>Sat, 25 Feb 2017 01:55:05 -0300</lastBuildDate>
    <generator>Jekyll v1.5.1</generator>
    
      <item>
        <title>El extrano mundo de los tipos en Javascript</title>
        <description>&lt;p&gt;&lt;em&gt;Si vamos a empezar, que sea desde las bases. Por esto, es hora de que entendamos como nuestro amado Javascript maneja sus tipos. Desde hace algunos meses, librerias como Typescript y Flow estan tomando mucho protagonismo. Algunos las odian, otros las aman, pero antes de meternos con esas libs, lo ideal seria entender como se manejan los tipos en JS.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;lenguajes-fuertemente-tipado-vs-lenguajes-debilmente-tipados&quot;&gt;Lenguajes fuertemente tipado vs lenguajes debilmente tipados&lt;/h3&gt;
&lt;p&gt;Primero, tenemos que tener en claro la diferencia entre estos tipos de lenguajes. En un lenguaje fuertemente tipado, las variables tienen un tipo concreto y no podran recibir un valor de otro tipo, o hacer operaciones con otros tipos, a menos que se haga una conversion en las mismas (typecasting).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ejemplo en c&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int superIntVariable = 15; 
superIntVariable + &quot;12&quot; //error!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En cambio, en los debiles, como lo es javascript, las variables pueden recibir distinto tipos de valores  y hacer operaciones entre distintos tipos, hola libertinaje! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ejemplo en js &amp;lt;3&lt;/strong&gt; &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;superIntVariable = 15; 
superIntVariable + &quot;12&quot; // &quot;1512&quot; Trato de hacer lo mejor que puedo ;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En este caso, js convierte el 15 en string y se lo concatena al 12, ya que para los strings sumar es igual a concatenar. &lt;/p&gt;

&lt;h3 id=&quot;tipos-en-js&quot;&gt;Tipos en JS&lt;/h3&gt;
&lt;p&gt;Como veiamos anteriormente debido a su naturaleza debilmente tipada, cuando programamos en JS, pareciera que los tipos no existen. Pero no nos dejemos enganar, aunque no los veamos los tipos siempre estan. &lt;/p&gt;

&lt;p&gt;Javascript define los siguientes tipos: &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Undefined&lt;/li&gt;
  &lt;li&gt;Null &lt;/li&gt;
  &lt;li&gt;Boolean &lt;/li&gt;
  &lt;li&gt;Number&lt;/li&gt;
  &lt;li&gt;String&lt;/li&gt;
  &lt;li&gt;Object &lt;/li&gt;
  &lt;li&gt;Symbol definido por ECMAScript6 (aprenderemos esto en algun momento, ahora no tengo idea que es =) )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Como podemos comprobar rapidamente los tipos? Abramos la consola de chrome y utilicemos el operador &lt;em&gt;typeof&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typeof 15
&quot;number&quot;

typeof &quot;super string&quot;
&quot;string&quot;

typeof true
&quot;boolean&quot;

typeof soyUnaVariableNoDeclarada
&quot;undefined&quot;

typeof {}
&quot;object&quot; 
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Sat, 25 Feb 2017 00:00:00 -0300</pubDate>
        <link>https://quilombodd.herokuapp.com//2017/02/25/TiposEnJavascript/</link>
        <guid isPermaLink="true">https://quilombodd.herokuapp.com//2017/02/25/TiposEnJavascript/</guid>
        
        
      </item>
    
  </channel>
</rss>
